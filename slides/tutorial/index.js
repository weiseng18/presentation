// base components
import { Flex, Heading, Text, VStack } from "@chakra-ui/react"
import { MText } from "../../components/MotionChakra"

// slide components
import Slide from "../../components/Slide"
import TitleSlide from "../../components/TitleSlide"
import ContentSlide from "../../components/ContentSlide"
import TwoColSlide from "../../components/TwoColSlide"

// custom components
import CaptionImageFull from "../../components/CaptionImageFull"
import CaptionImageTransition from "../../components/CaptionImageTransition"

// syntax highlighting
import SyntaxHighlighter from "react-syntax-highlighter"
import { vs2015 } from "react-syntax-highlighter/dist/cjs/styles/hljs"

import { toggleOpacity } from "../../animations"
import { useEffect, useState } from "react"

const PreTitle = ({ direction }) => {
  return (
    <TitleSlide
      direction={direction}
      title="First slide"
      subtitle="some text"
    />
  )
}

const Content = ({ direction, step }) => {
  const [color, setColor] = useState("black")
  const [fontSize, setFontSize] = useState("16px")

  useEffect(() => {
    if (step >= 1) {
      setColor("blue")
      setFontSize("32px")
    } else {
      setColor("black")
      setFontSize("16px")
    }
  }, [step])

  return (
    <ContentSlide direction={direction} title="Some content">
      <VStack spacing={8}>
        <MText
          animate={{
            color: color,
            fontSize: fontSize,
          }}
        >
          Hello World
        </MText>
        {step === 1 && (
          <MText
            color="red"
            initial={toggleOpacity.initial}
            animate={toggleOpacity.animate}
            exit={toggleOpacity.exit}
            variants={toggleOpacity.variants}
            custom="enter"
          >
            Hello World
          </MText>
        )}
      </VStack>
    </ContentSlide>
  )
}

const CaptionImageToText = ({ direction, step }) => {
  return (
    <ContentSlide direction={direction} title="Transform caption to text">
      <Text textStyle="body1">Sample transitions</Text>
      {step == 1 && (
        <CaptionImageTransition
          src="pixelart.png"
          h="512"
          w="910"
          caption="pixelart editor"
          layoutId="test"
        />
      )}
      {step >= 2 && (
        <MText layoutId="test" textStyle="body1">
          Transition
        </MText>
      )}
    </ContentSlide>
  )
}

const Images = ({ direction, step }) => {
  return (
    <ContentSlide direction={direction} title="HTML/CSS/JS">
      <Text textStyle="body1">
        Static, single-page websites, made with vanilla JS, for solo projects
      </Text>
      <Flex w="100%" justifyContent="space-around" alignItems="center" mt={8}>
        {step >= 1 && (
          <CaptionImageFull
            src="pixelart.png"
            h="256"
            w="455"
            isFull={step == 1}
            caption="pixelart editor"
          />
        )}
        {step >= 3 && (
          <CaptionImageFull
            src="maze.png"
            h="256"
            w="455"
            isFull={step == 3}
            adjust="-30%"
            caption="maze generated by Prim's algorithm"
          />
        )}
      </Flex>
    </ContentSlide>
  )
}

const Side = ({ direction, step }) => {
  return (
    <TwoColSlide direction={direction} title="Title on the side">
      <MText
        textStyle="body1"
        animate={{ transform: `scale(${step === 1 ? 2.5 : 1})` }}
      >
        Hello World
      </MText>
      <MText
        textStyle="body1"
        layoutId={step === 2 && "transition"}
        animate={{ transform: `scale(${step === 2 ? 2.5 : 1})` }}
      >
        Transition to Title
      </MText>
    </TwoColSlide>
  )
}

const TransitionCrossSlide = ({ direction }) => {
  return (
    <ContentSlide
      direction={direction}
      title="Transition to Title"
      layoutIdTitle="transition"
    >
      <SyntaxHighlighter language="javascript" style={vs2015} showLineNumbers>
        {
          "const increment = (num) => num + 1\nconst decrement = (num) => num - 1\n\n// here is some indented code\nif ( decrement(increment(1)) === 1 )\n\tconsole.log('Same number')"
        }
      </SyntaxHighlighter>
    </ContentSlide>
  )
}

const Final = ({ direction }) => {
  return (
    <Slide direction={direction}>
      <Heading>Hello World</Heading>
    </Slide>
  )
}

export default [
  PreTitle,
  Content,
  CaptionImageToText,
  Images,
  Side,
  TransitionCrossSlide,
  Final,
]
